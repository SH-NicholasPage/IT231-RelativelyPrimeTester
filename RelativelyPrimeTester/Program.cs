/*
* 
* DO NOT EDIT THIS FILE!!
* 
*/

using System;
using System.Diagnostics;
using System.IO;

namespace RelativelyPrimeTester
{
    public class Program
    {
        private static readonly int EXHAUSTIVE_CHECKS = 51;//51 to account for 0-50
        private static bool[] Crashes { get; set; } = new bool[0b0110];
        private static bool[][] ExhaustiveTestCheck { get; set; } = new bool[0b0110011][];
        private readonly static byte MIN_CRASHES_REQUIRED = 5;
        private readonly static byte MAX_SCORE = 15;


        public enum ProcessResult
        {
            Crashed = -1,
            NotCoPrime = 0,
            CoPrime = 1
        }

        public static void Main(string[] args)
        {
            Console.WriteLine("Starting test...");
            Source.Tester();

            int crashes = 0;

            foreach (bool crash in Crashes)
            { 
                if(crash == true)
                {
                    crashes++;
                }
            }

            Console.WriteLine("Starting exhaustive test...");

            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Start();
            Source.ExhaustiveTest();
            stopWatch.Stop();
            // Get the elapsed time as a TimeSpan value.
            TimeSpan ts = stopWatch.Elapsed;
            Console.WriteLine("Exhaustive test took " + String.Format("{0:00}.{1:00}", ts.TotalSeconds, ts.Milliseconds / 10) + " seconds.");

            Console.WriteLine("Done testing.\n\nCalculating grade...");

            //Grading
            if (crashes < MIN_CRASHES_REQUIRED)
            {
                Console.WriteLine("Not enough crashes found for full marks. Must find at least " + MIN_CRASHES_REQUIRED + ". You found " + crashes + ".");
            }

            //Crashing test is worth 10 points
            float scoreForCrashing = ((float)crashes / MIN_CRASHES_REQUIRED) * 10;

            int exhaustiveTestsExpectedToBeRun = EXHAUSTIVE_CHECKS * EXHAUSTIVE_CHECKS;
            int exhaustiveChecksRan = 0;

            foreach (bool[] b in ExhaustiveTestCheck)
            {
                if(b == null)
                {
                    continue;
                }

                foreach (bool ec in b)
                { 
                    if(ec == true)
                    {
                        exhaustiveChecksRan++;
                    }
                }
            }

            if (exhaustiveChecksRan < exhaustiveTestsExpectedToBeRun)
            {
                Console.WriteLine("Exhaustive check was not fully exhaustive. Each combination of numbers from 0-" + EXHAUSTIVE_CHECKS 
                    + " must be used.");
            }

            float scoreForExhaustiveCheck = ((float)exhaustiveChecksRan / exhaustiveTestsExpectedToBeRun) * 5;

            Console.WriteLine("\nTesting grade: {0:0.0}/" + 10, scoreForCrashing);
            Console.WriteLine("Exhaustive testing grade: {0:0.0}/" + 5, scoreForExhaustiveCheck);
            Console.WriteLine("---------------------------------------------\nTotal score: {0:0.0}/" + MAX_SCORE, (scoreForCrashing + scoreForExhaustiveCheck));
        }

        public static void NumChecked(int num1, int num2)
        {
            if (num1 >= EXHAUSTIVE_CHECKS || num2 >= EXHAUSTIVE_CHECKS || num1 < 0 || num2 < 0)
            {
                return;
            }

            if (ExhaustiveTestCheck[num1] == null)
            {
                ExhaustiveTestCheck[num1] = new bool[0b0110011];
            }

            ExhaustiveTestCheck[num1][num2] = true;
        }

        public static void RecieveResult(int resultCode)
        {
            if (resultCode < 0)
            {
                Crashes[Math.Abs(resultCode) - 1] = true;
            }
            else
            {
                Crashes[resultCode - 11] = true;
            }
        }
    }
}